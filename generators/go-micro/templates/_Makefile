ifndef COMPONENT
	COMPONENT := <%= projectName %>
endif

ifndef PROJECT_NAME
	PROJECT_NAME := icelandairlabs-com
endif

ifndef DOMAIN
	DOMAIN := icelandairlabs.com
endif

ifndef DOCKER_REGISTRY_HOST
	DOCKER_REGISTRY_HOST := docker.icelandairlabs.com
endif

ifndef PIPELINE_VERSION
	PIPELINE_VERSION := latest
endif

ifndef DOCKER_IMAGE
	DOCKER_IMAGE := ${DOCKER_REGISTRY_HOST}/${PROJECT_NAME}/${COMPONENT}:${PIPELINE_VERSION}
endif

ifndef HOST
	HOST := localhost
endif

ifndef TEST_HOST
	TEST_HOST := routes
endif

ifndef PORT
	PORT := 10000
endif

# Development
provision:
	@go get -t ./...

dev:
	@go get github.com/smartystreets/goconvey
	@goconvey -port 8081 -watchedSuffixes .go,.json

test:
	#go get -u github.com/go-swagger/go-swagger/cmd/swagger
	@swagger validate ./contracts/downstream/SomeConsumer/contract.yml
	@go get github.com/jstemmer/go-junit-report
	go test -v ./... -check.f "Integration|Unit" | go-junit-report > report.xml

end-to-end-test:
	go get github.com/jstemmer/go-junit-report
	#go test -run 'Integration' -v ./... #| go-junit-report > report.xml
	go test -v ./... -check.f "EndToEnd" | go-junit-report > report_e2e.xml

cov:
	@go test ./handlers -coverprofile=cover.out
	@go tool cover -html=cover.out -o coverage.html

bench:
	@go  test ./... -bench=".*"

run:
	. etc/MICROSERVICENAME/database/database-credentials.env &&	fresh

build:
	go get ./...
	CGO_ENABLED=0 go build -o tmp/<%= projectName %>

# Container
docker:
	docker build -t ${DOCKER_IMAGE} .

docker-push:
	docker push ${DOCKER_IMAGE}

docker-build:
	docker run --rm -v ${HOME}/.ssh:/root/.ssh \
		-v ${PWD}:/go/src/github.com/Icelandair/micro.<%= projectName %> \
		-w /go/src/github.com/Icelandair/micro.<%= projectName %> \
		golang:1.5 make docker-build-internal

docker-build-internal:
	# Don't use this on developer machines, it's for internal docker build
	# It will fuck up your git configuration
	git config --global url."git@github.com:".insteadOf "https://github.com/"
	go get ./...
	CGO_ENABLED=0 go build -o tmp/<%= projectName %>

docker-test:
	docker run --rm -v ${HOME}/.ssh:/root/.ssh \
		-v ${PWD}:/go/src/github.com/Icelandair/micro.<%= projectName %> \
		-w /go/src/github.com/Icelandair/micro.<%= projectName %> \
		golang:1.5 make docker-test-internal

docker-test-internal:
	# Don't use this on developer machines, it's for internal docker build
	# It will fuck up your git configuration
	git config --global url."git@github.com:".insteadOf "https://github.com/"
	go get -t ./...
	go get github.com/jstemmer/go-junit-report
	go test -v ./... | go-junit-report > report.xml
	go test ./handlers -coverprofile=cover.out
	go tool cover -html=cover.out -o coverage.html
	go get github.com/axw/gocov/...
	go get github.com/AlekSi/gocov-xml
	gocov test ./... | gocov-xml > coverage.xml

docker-e2e:
	docker run --rm -v ${HOME}/.ssh:/root/.ssh \
		-v ${PWD}:/go/src/github.com/Icelandair/micro.<%= projectName %> \
		-w /go/src/github.com/Icelandair/micro.<%= projectName %> \
		--link routes \
		--net microroutes_default \
		-e "TEST_HOST=${TEST_HOST}" \
		golang:1.7 make docker-e2e-internal

docker-e2e-internal:
	# Don't use this on developer machines, it's for internal docker build
	# It will fuck up your git configuration
	git config --global url."git@github.com:".insteadOf "https://github.com/"
	go get -t ./...
	go get github.com/jstemmer/go-junit-report
	go test -v ./... -check.f "EndToEnd" | go-junit-report > report_e2e.xml
	go test ./handlers -coverprofile=cover.out -check.f "EndToEnd"
	go tool cover -html=cover.out -o coverage_e2e.html
	go get github.com/axw/gocov/...
	go get github.com/AlekSi/gocov-xml
	gocov test ./... -check.f "EndToEnd" | gocov-xml > coverage_e2e.xml

# Builder container
docker-builder:
	docker build -t ${DOCKER_IMAGE} -f Dockerfile.builder .

docker-builder-push:
	docker push ${DOCKER_IMAGE}

docker-tag:
	docker tag ${DOCKER_IMAGE_NO_TAG} ${DOCKER_IMAGE}

docker-builder-shell:
	docker run -it --rm ${DOCKER_IMAGE} bash

# Kubernetes
rebuild-deployment: clean-deployment deployment

clean-deployment:
	@cat micro.<%= projectName %>.deployment.yml | \
	TPL_DOCKER_IMAGE="" \
	util/env_replace.py TPL_DOCKER_IMAGE | \
	kubectl delete -f - --ignore-not-found

deployment:
	@cat micro.<%= projectName %>.deployment.yml | \
	TPL_DOCKER_IMAGE=${DOCKER_IMAGE} \
	util/env_replace.py TPL_DOCKER_IMAGE | \
	kubectl apply -f -

rebuild-service: clean-service service

clean-service:
	@kubectl delete -f micro.<%= projectName %>.service.yml

service:
	@kubectl apply -f micro.<%= projectName %>.service.yml
